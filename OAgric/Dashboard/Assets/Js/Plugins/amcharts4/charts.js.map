{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/types/PercentChart.ts","webpack:///../../../../../src/.internal/charts/elements/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":["__webpack_require__","d","__webpack_exports__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_10__core_elements_ZoomOutButton__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_12__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Utils__","_super","_this","call","this","className","applyTheme","_axisRendererX","_axisRendererY","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","Object","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","series","iterator","invalidate","validateData","_parseDataFrom","dataChangeUpdate","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","axis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processYAxis","handleYAxisRangeChange","range","getCommonAxisRange","xAxes","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","start","end","yAxes","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","inited","invalidateDataItems","defineProperty","_xAxes","handleAxisRemoval","oldValue","autoDispose","dispose","_yAxes","handleSeriesAdded","xAxis","yAxis","undefined","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateLegendValue","sprites","sprite","hideTooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltip","setBounds","point","showTooltipAtPosition","sort","a","b","length","top_1","bottom","topSeriesPoints","botSeriesPoints","i","len","nextY","pointY","invalid","validate","label","pixelY","measuredHeight","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","htmlContainer","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","locationY","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","type","Error","axisRanges","index","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","disposeData","scrollbarChart","registeredClasses","CategoryAxisDataItem","CategoryAxis","__WEBPACK_IMPORTED_MODULE_1__Axis__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","text","locations","category","endCategory","properties","setProperty","dataItemsByCategory","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","validateDataRange","dataCount","startIndex","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","ghostLabel","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","disabled","updateTickElement","grid","updateGridElement","updateLabelElement","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","startLocation","endLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","fdx","fdy","radius","isMeasured","setPercentProperty","pixelRadius","axisRadius","sign","inside","fixPoint","atan2","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","XYSeriesDataItem","XYSeries","__WEBPACK_IMPORTED_MODULE_1__Series__","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_15__core_rendering_Path__","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","field","getWorkingValue","getValue","getMax","_xAxis","_yAxis","mainContainer","setElement","paper","stacked","pointerOrientation","returnBulletDefaultState","_tmin","clear","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","dataItemsX","dataItemsByAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","fillPath","path","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","removeKey","set","registerSeries","invalidateData","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","dispatchImmediately","_prevTooltipDataItem","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_a","bullets","_b","done","isHover","showTooltip","tooltipText","bullet","isDisposed","positionBullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","moveTo","bulletLocation","workingLocations","duration","animation","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","anim","isFinished","minZoomed","maxZoomed","once","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","DateAxisDataItem","DateAxis","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","endDate","dates","getTime","endValue","gridIntervals","dateFormats","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minSeriesDifference","MAX_VALUE","gridInterval","_gridInterval","gridDuration","pushAll","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","hasMoreThanOne","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","markUnitChange","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","location_1","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","time","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","tooltipDateFormat","dateFormat","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","asIs","XYCursor","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","_lineX","_lineY","interfaceColors","selection","getFor","interactionsEnabled","lineX","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","_positionPrecision","h","validatePosition","triggerMoveReal","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","LineSeriesDataItem","LineSeries","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","connect","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegment","_workingStartIndex","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","line","x2","copyToLegendMarker","hasLabels_1","children","child","clone","LineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","fillElement","PieSeriesDataItem","PieSeries","__WEBPACK_IMPORTED_MODULE_1__PercentSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","radiusValue","toValue","alignLabels","startAngle","endAngle","createSlice","createTick","createLabel","initSlice","slice","defaultState","scale","handleSliceScale","handleSliceMove","states","shiftRadius","togglable","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","aAngle","middleAngle","bAngle","arrangeLabels","innerRadius","pixelInnerRadius","arc","normalizedMiddleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","_pixelRadius","_pixelInnerRadius","definedBBox","Candlestick","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","createAssets","lowLine","highLine","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","useChartAngles","pixelPerfect","tooltipLocation","setAxis","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","createGrid","createFill","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","RadarChart","__WEBPACK_IMPORTED_MODULE_1__XYChart__","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","innerRadiusModifyer","radarContainer","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","startValue","Cursor","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","local","_stickPoint","triggerMove","isHidden","hideReal","stick","invalidatePosition","getPositions","triggerDown","setGlobalStyle","grabbing","triggerUp","getHitOption","interactions","default","cancelable","preventDefault","lockElement","XYChartScrollbar","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","title","rangeChangeDuration","id","axisFills","transitionDuration","zoomOutAxes","updateByOrientation","off","handleDataChanged","updateThumb","RadarSeriesDataItem","RadarSeries","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","gridType","axisAngle","gridLocation","count_1","cellEndLocation","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","updateTooltip","tooltipOrientation","bigNum","axisFullLength","ClockHand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","_axis","pin","startWidth","endWidth","hand","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","PieChart","__WEBPACK_IMPORTED_MODULE_1__PercentChart__","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","updateRadius","validateLayout","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","invalidateLayout","PercentChartDataItem","PercentChart","__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","feedLegend","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","setLegend","PercentSeriesDataItem","PieTick","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_label","_slice","y0","y1","y2","r","attr","PieSeries3DDataItem","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depthValue","depth","depthPercent","ChordNode","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","updateRotation","hiddenState","setStateOnChildren","invalidateLinks","sum","total","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","ChordLink","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","middleLine","isTemplate","fromX","fromY","toX","toY","cp","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","TreeMapSeriesDataItem","TreeMapSeries","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","treeMapDataItem","_dataContext","columns","configField","seriesDataItem","showReal","removeChildren","column","AxisRendererX3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","getWidth","ColumnSeries3DDataItem","ColumnSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","columnsContainer","_columnsContainer","validateDataElementReal","createColumnTemplate","Column3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__","CandlestickSeriesDataItem","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","openLine","highLowLine","closeLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","PyramidSeriesDataItem","PyramidSeries","__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","s","sqrt","_nextY","sliceWidth","ConeColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","coneColumn","CurvedColumn","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","curvedColumn","realWidth","realHeight","realX","realY","tension","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__","__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__","__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__","__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__","__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__","__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__","__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__","__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__","__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__","__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__","__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__","__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__","__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__","__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__","__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__","__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__","__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__","__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__","__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__","__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__","__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__","__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_ClockHand__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_SankeyNode__","__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyLink__","__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_NavigationBar__","__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_Column__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_OHLC__","__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_RadarColumn__","__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_Column3D__","__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_ConeColumn__","__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_CurvedColumn__","__WEBPACK_IMPORTED_MODULE_80__internal_charts_cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","GaugeChart","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","hands","processHand","PieChart3DDataItem","PieChart3D","__WEBPACK_IMPORTED_MODULE_1__PieChart__","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","invalidateDataUsers","SlicedChartDataItem","SlicedChart","ChordDiagramDataItem","ChordDiagram","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","p1","p2","point1","point2","TreeMapDataItem","TreeMap","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","rows","hasChildren","level","color","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","binaryTree","dice","sliceDice","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleDataItemValueChange","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__core_Sprite__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_6__series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","fixLayout","fixColumns","clustered","depthIndex","i_1","maskColumns","OHLCSeriesDataItem","OHLCSeries","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesDataItem","StepLineSeries","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","noRisers","prevPoint","point0","vertical","StepLineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","addSprite","setColumnStates","disableUnusedColumns","PictorialStackedSeriesDataItem","PictorialStackedSeries","__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","expandDistance","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CurvedColumnSeriesDataItem","CurvedColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__","DurationAxisDataItem","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet","__WEBPACK_IMPORTED_MODULE_1__Bullet__","circle","NavigationBarDataItem","NavigationBar","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","textLink","paddingTop","paddingBottom","_linksIterator","triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","ColumnSeriesDataItem","ColumnSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__","_column","setColumn","_rangesColumns","_startLocation","_endLocation","simplifiedProcessing","baseAxisSeries","clusterCount","cellStartLocation","l","t","percentHeight","outOfBounds","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","virtualParent","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","isInTransition","itemsFocusable","role","focusable","ev","populateString","_columns","legendDataItem","fromOpenState_1","fromPreviousState_1"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t// commented, because series does this.\r\n\t\t\t//$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t//$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(()=>{\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\t\t\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\tif(this.inited){\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event:IListEvents<Axis>[\"removed\"]){\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif(axis.autoDispose){\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t}\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0, len = topSeriesPoints.length; i < len; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\r\n\t\tif(!axis){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0 ) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX ;\r\n\t\tif(scrollbarX && scrollbarX instanceof XYChartScrollbar){\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY ;\t\r\n\t\tif(scrollbarY && scrollbarY instanceof XYChartScrollbar){\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis)=>{\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis)=>{\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif(!dataItem.isRange || label.text == undefined){\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx:number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy:number = 0;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\t\t\t\r\n\t\tthis.fdy = this.dy;\t\t\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.dataChangeUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\t\tbullet.isHover = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tif (!bullet.isDisposed()) {\r\n\t\t\t\t\tbullet.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tlet anim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t\tif(anim && !anim.isFinished()){\r\n\t\t\t\tanimation = anim;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isFinished() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tlet hasMoreThanOne = false;\r\n\r\n\t\tif (this.chart.data.length > 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.data.length > 1) {\r\n\t\t\t\t\thasMoreThanOne = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!hasMoreThanOne) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif(source[\"_baseInterval\"]){\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\t\t\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\t \r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\r\n\t /*\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tif (dataItem.segment) {\r\n\t\t\t$object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n\t\t}\r\n\t}*/\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\t\t\t\tif ((a.slice.middleAngle + 360) % 360 < (b.slice.middleAngle + 360) % 360) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 90) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRectangle}\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _seriesType: RadarSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._scrollbarChart.data = chart.data;\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\t\t\t\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\t\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis.updateSeriesAngles();\r\n\t}\t\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t\tseries.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\tseries.defaultState.properties.endAngle = this.endAngle;\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\tthis.seriesContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\treturn dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.getValue(\"value\"), interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.showReal(duration);\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0, interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.hideReal(duration);\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\t\t\t\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\t\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from other element of the same type.\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 318\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic get percent():number {\r\n\t\tif(this.parent){\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count );\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"noRisers\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif(scale == Infinity){\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\r\n\t\tsuper.validateDataElements();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t *\r\n\t * @type {NavigationBarDataItem}\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\t\t\r\n\r\n\t\tlet outOfBounds:boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif(Math.abs(r - l) - paddingLeft - paddingRight == 0){\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif(Math.abs(t - b) - paddingTop - paddingBottom == 0){\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourceRoot":""}